- var select2               = true;
- var page_select2          = true;
- var sidebar_open          = true;
- var sweetalert2           = true;
- var err_handling          = true;
- var pe7_icon              = true;
- var datatable             = true;
- var page_datatable        = true;
- var popover_custom        = true;
- var form_wizard_three     = true;

doctype html
html(lang='en')
    include ../../components/header-files
    //pincodeInput
    link(rel='stylesheet', type='text/css', href='../../assets/css/bootstrap-pincode-input.css')
    body
        include ../../components/loader
        // page-wrapper Start
        .page-wrapper
            include ../../components/header
            // Page Body Start
            .page-body-wrapper
                include ../../components/sidebar
                .page-body
                    .container-fluid
                        .page-header
                            .row
                                .col-lg-6.main-header
                                    h2
                                      | Robots
                                    h6.mb-0 Manage robot users
                                .col-lg-6.breadcrumb-right      
                                    ol.breadcrumb
                                      li.breadcrumb-item
                                        a(href='/users/management')
                                         i.pe-7s-home
                                      li.breadcrumb-item.active robots
                    // Container-fluid starts
                    .container-fluid
                      .row
                        .col-sm-12
                            .card
                              .card-header
                                h5 Add New Robo-user
                              .card-body
                                    form.f1(method='POST' action='/utils/robot-user-add')
                                      .f1-steps
                                        .f1-progress
                                          .f1-progress-line(data-now-value='16.66', data-number-of-steps='3')
                                        .f1-step.active
                                          .f1-step-icon
                                            i.fa.fa-user
                                          p General Informations
                                        .f1-step
                                          .f1-step-icon
                                            i.fa.fa-key
                                          p Keys
                                        .f1-step
                                          .f1-step-icon
                                            i.fa.fa-users
                                          p Assigned Hosts
                                      fieldset
                                          .form-group
                                            label(for='f1-first-name') UID:
                                            input#f1-first-name.form-control(type='text', name='uid', placeholder='UID...', required)
                                          .form-group.m-form__group
                                             label Domain:
                                             .input-group
                                               .input-group-prepend
                                                 span.input-group-text @
                                               input.form-control(type='text', placeholder='Domain...' name='domain' required)
                                          .f1-buttons
                                            button.btn.btn-primary.btn-next(type='button') Next
                                      fieldset
                                        .form-group
                                            label(for='f1-first-name') Paste Public Key Below:
                                            textarea.form-control(name="pastedPubKey" rows="4" placeholder="SSH public key...")
                                        .f1-buttons
                                          button.btn.btn-primary.btn-previous(type='button') Previous
                                          | &nbsp;
                                          button.btn.btn-primary.btn-next(type='button') Next
                                      fieldset
                                         .form-group.select2-drpdwn
                                             label(for='f1-groups') Define host origin from wich user should be able to unlock key:
                                             select.js-adduserobot-multiple(name="hosts" style="width: 100%;" multiple='multiple')
                                                 if hosts
                                                     each val in hosts
                                                         option(value=val.hostname)=val.hostname
                                         .f1-buttons
                                             button.btn.btn-primary.btn-previous(type='button') Previous
                                             | &nbsp;
                                             button.btn.btn-primary
                                                 i.fa.fa-plus 
                                                 | &nbsp; Add Robot User
                                                 
                                  
                            .card
                                .card-header
                                    h5.card-title Robo-users list
                                .card-body
                                        .table-responsive
                                                table#basic-1.display
                                                    thead
                                                        tr
                                                            th Name
                                                            th Key Last Unlock
                                                            th Key Last Unlock Source
                                                            th Allowed hosts
                                                            th Lock
                                                            th Key Stat
                                                            th Act.
                                                    tbody
                                                        if users
                                                            each u in users
                                                                tr
                                                                    td=u.sys_username
                                                                    td=u.key_last_unlock
                                                                    td=u.key_last_unlock_source
                                                                    td=u.assigned_hosts.join(" ")
                                                                    //lock status
                                                                    if u.pwdAccountLockedTime
                                                                        td(style="width:  2%").mx-auto
                                                                            button.btn.btn-warning(type='button' title='' data-container='body' data-toggle='popover' data-placement='left' data-content='User is locked. Locked occurred in ts: '+u.pwdAccountLockedTime+'. click to unclock' data-original-title='Locked' onclick="location.href='/utils/robot-user-unlock?sys_username=" + u.sys_username +"'")
                                                                                i.fa.fa-lock
                                                                    else
                                                                        td(style="width:  2%").mx-auto
                                                                            button.btn.btn-success(type='button' title='' data-container='body' data-toggle='popover' data-placement='left' data-content='User is not locked. click to lock' data-original-title='Unlocked' onclick="location.href='/utils/robot-user-lock?sys_username=" + u.sys_username +"'")
                                                                                i.fa.fa-unlock
                                                                    
                                                                    //key status
                                                                    if u.sshPublicKey 
                                                                        td(style="width:  2%").mx-auto
                                                                            button.example-popover.btn.btn-success(type='button', data-toggle='popover', data-placement='left', title='' data-content=u.sshPublicKey, data-original-title='Encrypted SSH User key')
                                                                                i.fa.fa-check-circle
                                                                    else
                                                                        td(style="width:  2%").mx-auto
                                                                            button.example-popover.btn.btn-warning(type='button', data-toggle='popover', data-placement='left', title=''  data-content='please, ask user to load ssh key', data-original-title='SSH Key not loaded')
                                                                                i.fa.fa-times-circle
                                                                    //password expired  
                                                                    td(style="width:  2%;")
                                                                        div.dropdown.dropleft
                                                                            button.dropbtn.btn-danger(type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") 
                                                                                i.fa.fa-cog.dropdown-toggle-split
                                                                            div.dropdown-menu(aria-labelledby="dropdownMenuButton")
                                                                                h6.dropdown-header Account Actions
                                                                                div.dropdown-divider
                                                                                button.dropdown-item.btn.btn-light.txt-dark(onclick="edit_ssh_key('"+u.sys_username+"')" style="border-radius: 0px;") Edit user's SSH public key
                                                                                button.dropdown-item.btn.btn-light.txt-dark(onclick="add_allowed_host('"+u.sys_username+"','"+host_names.join(",")+"','"+u.assigned_hosts.join(",")+"')" style="border-radius: 0px;") Add Allowed Host
                                                                                button.dropdown-item.btn.btn-light.txt-dark(onclick="delete_allowed_host('"+u.sys_username+"','"+u.assigned_hosts.join(",")+"')" style="border-radius: 0px;") Delete Allowed Host
                                                                                button.dropdown-item.btn.btn-danger(onclick="confirm('"+u.sys_username+"');" style="border-radius: 0px;") Delete User
                                    
                            //-                            
                                .card-footer
                                  h5.card-title Sync LDAP server
                                    .mb-2
                                        br
                                        form(method='GET' action='/utils/ldap-sync')
                                            button.btn.btn-primary(style="width: 12%")
                                                i.fa.fa-spin.fa-refresh   //                       
                                                    
                            
                    // Container-fluid Ends
                include ../../components/footer
        include ../../components/footer-files
        style(type="text/css").
            .select2-container--open {
                z-index: 99999999999999;
            }
        script(type='text/javascript').
            function edit_ssh_key(sys_username, allowed_hosts)
            {    
                Swal.fire({
                  title: 'Edit SSH key for: '+sys_username,
                  html: `<p> Edit public key for the current user. <\p><div class="form-group"><textarea class="form-control" name="pastedPubKey" id="pastedPubKey" rows="4" placeholder="SSH public key..."></textarea></div>`,
                  confirmButtonText: 'Edit SSH key',
                  showCancelButton: true,
                  focusConfirm: false,
                  preConfirm: () => {
                    const pastedPubKey = Swal.getPopup().querySelector('#pastedPubKey').value

                    if (!pastedPubKey) {
                      Swal.showValidationMessage(`Please read the descriprion and fill the fields accordingly`)
                    }
            
                    return { pastedPubKey: pastedPubKey }
                  }
                }).then((result) => {
                    var form = $(`<form action="/utils/robot-key-upload" method="post">` +
                                  `<input type="hidden" name="sys_username" value="`+sys_username+`">` +
                                  `<input type="hidden" name="pastedPubKey" value="`+result.value.pastedPubKey+`"></form>`);
                    $('body').append(form);
                    form.submit();
                })
            }
            function confirm(sys_username)
            {
                Swal.fire({
                      title: 'Are you sure?',
                      text: "You won't be able to revert this!",
                      icon: 'warning',
                      showCancelButton: true,
                      confirmButtonColor: '#3085d6',
                      cancelButtonColor: '#d33',
                      confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                  if (result.value) {
                      var form = $('<form action="/utils/robot-user-delete" method="post">' +
                                    '<input type="hidden" name="sys_username" value='+sys_username+'></form>');
                      $('body').append(form);
                      form.submit();
                  }
                  else if (result.dismiss === Swal.DismissReason.cancel) {
                    Swal.fire({
                        title: 'Canceled',
                        text: "User elimination aborted.",
                        icon: 'success',
                        timer: 1000,
                        timerProgressBar: true
                      })
                  }
                })
            }
            function add_allowed_host(sys_username, available_hosts, allowed_hosts)
            {
                available_hosts = available_hosts.split(",");
                allowed_hosts =allowed_hosts.split(",");
                
                //subtract command sets assignet to current shell
                //from all available command sets (avoid duplicates)
                options_available_hosts = available_hosts.filter(function(n) {
                    return allowed_hosts.indexOf(n) === -1;
                })
                
                //generate HTML
                options_html_array = options_available_hosts.map(function(el){
                    return "<option value='"+el+"'>"+el+"</option>"
                });
                
                if(options_html_array.length > 0 )
                    select_options_html = "<select class='js-example-basic-single' id='host' name='host' style='width:100%' required><option value='unselected' selected disabled>Select a Connected Host ...</option>"+options_html_array.join("")+"</select>"; 
                else 
                    select_options_html = "<span>There is no available connected host you can assign to the user.</span>"
                
                Swal.fire({
                  title: 'Assign host to '+sys_username,
                  html: `<p> Assign a host from wich a user will be able to unlock the key <\p>`+select_options_html,
                  confirmButtonText: 'Add Allowed Host',
                  focusConfirm: false,
                  showCancelButton: true,
                  onOpen: function(){$(".js-example-basic-single").select2();},
                  preConfirm: () => {
                    const host = Swal.getPopup().querySelector('#host').value
    
                    if (host == 'unselected') {
                      Swal.showValidationMessage(`Please read the descriprion and fill the fields accordingly`)
                    }
            
                    return { host: host }
                  }
                }).then((result) => {
                    var form = $(`<form action="/utils/robot-allowed-host-add" method="post">` +
                                  `<input type="hidden" name="sys_username" value="`+sys_username+`">` +
                                  `<input type="hidden" name="host" value="`+result.value.host+`"></form>`);
                    $('body').append(form);
                    form.submit();
                })
            }
            function delete_allowed_host(sys_username, available_hosts)
            {
                available_hosts = available_hosts.split(",");

                if (available_hosts[0]!="")//empty array
                {
                    //generate HTML
                    options_html_array = available_hosts.map(function(el){
                        return "<option value='"+el+"'>"+el+"</option>"
                    });
                    select_options_html = "<select class='js-example-basic-single' id='host' name='host' style='width:100%' required><option value='unselected' selected disabled>Select an allowed host ...</option>"+options_html_array.join("")+"</select>"; 
                }
                else
                {
                    select_options_html = "<span>No hosts are allowed to unlock ket for this user</span>"
                }
                
                Swal.fire({
                  title: 'Delete an allowed host for: '+sys_username,
                  html: `<p> Delete an allowed host for the current user. <\p>`+select_options_html,
                  confirmButtonText: 'Delete Allowed Host',
                  showCancelButton: true,
                  focusConfirm: false,
                  onOpen: function(){$(".js-example-basic-single").select2();},
                  preConfirm: () => {
                    const host = Swal.getPopup().querySelector('#host').value
    
                    if (host == 'unselected') {
                      Swal.showValidationMessage(`Please read the descriprion and fill the fields accordingly`)
                    }
            
                    return { host: host }
                  }
                }).then((result) => {
                    var form = $(`<form action="/utils/robot-allowed-host-delete" method="post">` +
                                  `<input type="hidden" name="sys_username" value="`+sys_username+`">` +
                                  `<input type="hidden" name="host" value="`+result.value.host+`"></form>`);
                    $('body').append(form);
                    form.submit();
                })
            }
            //only one check selected
            $('input.checkbox').on('change', function() {
                $('input.checkbox').not(this).prop('checked', false);  
            });
            
    
